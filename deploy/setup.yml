- hosts: auth487
  remote_user: '{{ remote_user }}'
  become: True
  become_method: sudo

  vars:
    container_name: auth487
    network_name: auth487_net

  tasks:
    - name: Check SSL certificates
      stat:
        path: /etc/letsencrypt/live/{{ http_domain }}
      register: nginx_ssl_result

    - name: Setup NGINX no SSL host config
      template:
        src: provision/nginx-no-ssl.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      when: nginx_ssl_result.stat.exists == False
      register: no_ssl_config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf
      when: no_ssl_config_res.changed

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: no_ssl_config_res.changed

    - name: Install certificate
      shell: |
        certbot --nginx \
          -d {{ http_domain }} \
          -n \
          --agree-tos \
          -m '{{ cert_email }}'
      when: nginx_ssl_result.stat.exists == False
      register: certificate_res

    - name: Create web root
      file:
        dest: /var/www/{{ http_domain }}
        state: directory
        owner: www-data
        group: www-data

    - name: Setup NGINX host config
      template:
        src: provision/nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      register: config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: config_res.changed or certificate_res.changed

    - name: Create docker network for service
      community.general.docker_network:
        name: '{{ network_name }}'
        state: present
        internal: yes
        driver: bridge
      register: docker_network

    - name: Update image
      community.general.docker_image:
        name: 'andre487/{{ container_name }}'
        source: pull
        force_source: yes
      register: docker_image

    - name: Stop and remove container
      community.general.docker_container:
        name: '{{ container_name }}'
        state: absent
        container_default_behavior: no_defaults
      when: docker_network.changed or docker_image.changed

    - name: Start container
      community.general.docker_container:
        name: '{{ container_name }}'
        image: 'andre487/{{ container_name }}'
        state: started
        container_default_behavior: no_defaults
        detach: yes
        restart_policy: always
        networks_cli_compatible: no
        networks:
          - name: '{{ network_name }}'
        ports:
          - '127.0.0.1:{{ service_port }}:5000'
        env:
          SECRETS_DIR: /opt/secrets
          MONGO_HOST: /opt/secrets/mongo/host
          MONGO_PORT: /opt/secrets/mongo/port
          MONGO_REPLICA_SET: /opt/secrets/mongo/replica_set
          MONGO_SSL_CERT: /opt/secrets/mongo/ssl_cert
          MONGO_USER: /opt/secrets/mongo/user
          MONGO_PASSWORD: /opt/secrets/mongo/password
          MONGO_AUTH_SOURCE: /opt/secrets/mongo/auth_source
          MONGO_DB_NAME: auth487
          AUTH_BASE_URL: 'https://{{ http_domain }}'
          AUTH_DOMAIN: '{{ auth_domain }}'
          AUTH_PRIVATE_KEY_FILE: /opt/secrets/auth_info/auth_key.pem
          AUTH_PUBLIC_KEY_FILE: /opt/secrets/auth_info/auth_key.pub.pem
          AUTH_INFO_FILE: /opt/secrets/auth_info/auth_info.json
          NOTIFICATION_EMAIL_FROM: '{{ notification_from }}'
          NOTIFICATION_EMAIL_TO: '{{ notification_to }}'
          GMAIL_CREDENTIALS_FILE: /opt/secrets/gmail_sender/gmail_credentials.json
      when: docker_network.changed or docker_image.changed
