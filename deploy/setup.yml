- hosts: auth487
  remote_user: '{{ remote_user }}'
  become: True
  become_method: sudo

  vars:
    container_name: auth487
    network_name: auth487_net
    service_port: 10400
    secret_dir: '{{ playbook_dir }}/../.secret'

  tasks:
    - name: Check SSL certificates
      stat:
        path: /etc/letsencrypt/live/{{ http_domain }}
      register: nginx_ssl_result

    - name: Setup NGINX no SSL host config
      template:
        src: provision/nginx-no-ssl.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      when: nginx_ssl_result.stat.exists == False
      register: no_ssl_config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf
      when: no_ssl_config_res.changed

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: no_ssl_config_res.changed

    - name: Install certificate
      shell: |
        certbot --nginx \
          -d {{ http_domain }} \
          -n \
          --agree-tos \
          -m '{{ cert_email }}'
      when: nginx_ssl_result.stat.exists == False
      register: certificate_res

    - name: Create web root
      file:
        dest: /var/www/{{ http_domain }}
        state: directory
        owner: www-data
        group: www-data

    - name: Setup NGINX host config
      template:
        src: provision/nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      register: config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: config_res.changed or certificate_res.changed

    - name: Create docker network for all services
      shell: docker network create --driver bridge '{{ network_name }}' || true

    - name: Create app configs dir
      file:
        state: directory
        dest: /etc/auth487

    - name: Create app MongoDB auth dir
      file:
        state: directory
        dest: /etc/auth487/mongo

    - name: Setup auth info file
      copy:
        src: '{{ secret_dir }}/auth_info/auth_info.json'
        dest: /etc/auth487/auth-info.json

    - name: Setup private key
      copy:
        src: '{{ secret_dir }}/auth_info/auth_key.pem'
        dest: /etc/auth487/auth_key.pem

    - name: Setup public key
      copy:
        src: '{{ secret_dir }}/auth_info/auth_key.pub.pem'
        dest: /etc/auth487/auth_key.pub.pem

    - name: Setup Gmail credentials file
      copy:
        src: '{{ secret_dir }}/gmail_sender/credentials.json'
        dest: /etc/auth487/gmail_credentials.json

    - name: Setup MongoDB auth files
      copy:
        src: '{{ secret_dir }}/mongo/{{ item }}'
        dest: /etc/auth487/mongo/{{ item }}
      with_items:
        - hosts
        - port
        - replica_set
        - auth_src
        - ssl_cert
        - user
        - password

    - name: Update image
      shell: docker pull andre487/{{ container_name }}

    - name: Stop container
      shell: |
        docker stop {{ container_name }} || true
        docker rm {{ container_name }} || true

    - name: Start container
      shell: |
        docker run \
          -d \
          --restart always \
          --network {{ network_name }} \
          --name {{ container_name }} \
          -v "/etc/auth487:/etc/auth487" \
          -v "/usr/local/share/ca-certificates:/usr/local/share/ca-certificates" \
          -e "MONGO_HOST=/etc/auth487/mongo/hosts" \
          -e "MONGO_PORT=/etc/auth487/mongo/port" \
          -e "MONGO_REPLICA_SET=/etc/auth487/mongo/replica_set" \
          -e "MONGO_SSL_CERT=/etc/auth487/mongo/ssl_cert" \
          -e "MONGO_USER=/etc/auth487/mongo/user" \
          -e "MONGO_PASSWORD=/etc/auth487/mongo/password" \
          -e "MONGO_AUTH_SOURCE=/etc/auth487/mongo/auth_src" \
          -e "MONGO_DB_NAME=auth487" \
          -e "AUTH_PRIVATE_KEY_FILE=/etc/auth487/auth_key.pem" \
          -e "AUTH_PUBLIC_KEY_FILE=/etc/auth487/auth_key.pub.pem" \
          -e "AUTH_DOMAIN={{ auth_domain }}" \
          -e "AUTH_INFO_FILE=/etc/auth487/auth-info.json" \
          -e "NOTIFICATION_EMAIL_FROM={{ notification_from }}" \
          -e "NOTIFICATION_EMAIL_TO={{ notification_to }}" \
          -e "GMAIL_CREDENTIALS_FILE=/etc/auth487/gmail_credentials.json" \
          -p 127.0.0.1:{{ service_port }}:5000 \
          andre487/{{ container_name }}
